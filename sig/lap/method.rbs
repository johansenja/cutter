module Lap
  class Method
    include Helpers

    @node: RBS::AST::Members::MethodDefinition
    @indent_level: Integer

    # @!begin
    #   @node = node
    #   @indent_level = indent_level
    # @!end
    def initialize: (RBS::AST::Members::MethodDefinition node, ?Integer indent_level) -> void

    #@!begin
    #  comment = get_comment(@node)
    #  result = <<~METHOD
    #    #{comment}def #{"self." unless @node.kind == :instance}#{@node.name}#{arguments}
    #      #{body}
    #    end
    #  METHOD
    #  result.indent(Lap::Config[:indent] * @indent_level)
    #@!end
    def render: () -> String

    private

    # @!begin
    #   case t
    #   when RBS::Types::Literal
    #     t.inspect
    #   when ->(t) { t.class.to_s.start_with? "RBS::Types::Bases" }
    #     "# returns #{t}"
    #   else
    #     "# TODO: return #{t.name.name}"
    #   end
    # @!end
    def return_type: (RBS::Types::t t) -> String

    # @!begin
    #   @arguments ||= begin
    #     type = @node.types.first.type
    #     rp = type.required_positionals
    #     rkw = type.required_keywords
    #     op = type.optional_positionals
    #     okw = type.optional_keywords
    #     args(rp, rkw, op, okw)
    #   end
    # @!end
    def arguments: () -> (String | nil)

    # @!begin
    #   @body ||= begin
    #     comment = @node.comment
    #     logic = ""
    #     if comment
    #       real_comment = []
    #       logic = []
    #       has_logic = false
    #       comment.string.lines.each do |line|
    #         if has_logic
    #           break if line.lstrip.start_with? "@!end"

    #           logic << line
    #         elsif line.lstrip.start_with? "@!begin"
    #           has_logic = true
    #         else
    #           real_comment << line
    #         end
    #       end
    #       logic = logic.join
    #       comment = real_comment.join
    #     end
    #     if logic.length.positive?
    #       logic
    #     else
    #       block = @node.types.first.block
    #       return_type = return_type(@node.types.first.type.return_type)
    #       yld = if block
    #               bt = block.type
    #               a = args(
    #                 bt.required_positionals,
    #                 bt.required_keywords,
    #                 bt.optional_positionals,
    #                 bt.optional_keywords
    #               )
    #               "yield#{a}\n"
    #             end
    #       "#{yld}#{return_type}"
    #     end
    #   end
    # @!end
    def body: () -> String
  end
end
